#include <SPI.h>

#define MAX6675_CS   10
#define MAX6675_SO   12
#define MAX6675_SCK  13


//Pins
int PWM_pin = 3;


//Variables
float temperature_read = 0.0;
float set_temperature = 65;
float PID_error = 0;
float previous_error = 0;
float elapsedTime, Time, timePrev;
int PID_value = 0;



//PID constants
float kp = 13;   float ki = .001;   float kd = 5;
float PID_p = 0;    float PID_i = 0;    float PID_d = 0;



void setup() {

 pinMode(PWM_pin,OUTPUT);
 
  TCCR2B = TCCR2B & B11111000 | 0x03;    // pin 3 and 11 PWM frequency of 980.39 Hz
 //unsigned long Time = millis();
 
 // lcd.init();
 // lcd.backlight();

 Serial.begin (9600);
}

void loop() {

   unsigned long Time = millis();         // actual time read
  double elapsedTime = double (Time - timePrev);
 
   // First we read the real value of temperature
  temperature_read = readThermocouple();
  //Next we calculate the error between the setpoint and the real value
  PID_error = set_temperature - temperature_read;
  //Calculate the P value
  PID_p = kp * PID_error;
  //Calculate the I value in a range on +-3
  //if(PID_error <3 && PID_error > -3)
  //{
  double  PID_i = ((PID_i+(PID_error*elapsedTime)*ki));
    //PID_i = PID_i + (ki * PID_error);  //original
 // }

  //For derivative we need real time to calculate speed change rate
                             // the previous time is stored before the actual time read


  
  
  //Now we can calculate the D calue
 double  PID_d = kd*((PID_error - previous_error)/elapsedTime);
  //Final total PID value is the sum of P + I + D
  PID_value = (int)(PID_p + PID_i + PID_d+0.5f);


 

 
 delay(1000);

double timePrev = Time;
double previous_error = PID_error; //Remember to store the previous error for next loop.
 
  //We define PWM range between 0 and 255
  if(PID_value < 0)
  {    PID_value = 0;    }
  if(PID_value > 255)  
  {    PID_value = 255;  }
  //Now we can write the PWM signal to the mosfet on digital pin D3
  analogWrite(PWM_pin,255-PID_value);
  


  
  
//float temperature_read = readThermocouple(); 
//lcd.setCursor(0,0);
//lcd.print("TEMPERATURE");
//lcd.setCursor(7,1);  
//lcd.print(temperature_read,1);    

Serial.println ("TEMP");
Serial.println (temperature_read,1);
Serial.println ("");
Serial.println ("PID OUTPUT");
Serial.println (PID_value);
Serial.println ("PID_error");
Serial.println (PID_error);
Serial.println ("PID Previous Error");
Serial.println (previous_error);
Serial.println ("");
Serial.println ("P value-");
Serial.println (PID_p); 
Serial.println ("");
Serial.println ("I value-");
Serial.println (PID_i);
Serial.println ("");
Serial.println ("D value-");
Serial.println (PID_d);
  
}


double readThermocouple() {

  uint16_t v;
  pinMode(MAX6675_CS, OUTPUT);
  pinMode(MAX6675_SO, INPUT);
  pinMode(MAX6675_SCK, OUTPUT);
  
  digitalWrite(MAX6675_CS, LOW);
  delay(1);

  // Read in 16 bits,
  //  15    = 0 always
  //  14..2 = 0.25 degree counts MSB First
  //  2     = 1 if thermocouple is open circuit  
  //  1..0  = uninteresting status
  
  v = shiftIn(MAX6675_SO, MAX6675_SCK, MSBFIRST);
  v <<= 8;
  v |= shiftIn(MAX6675_SO, MAX6675_SCK, MSBFIRST);
  
  digitalWrite(MAX6675_CS, HIGH);
  if (v & 0x4) 
  {    
    // Bit 2 indicates if the thermocouple is disconnected
    return NAN;     
  }

  // The lower three bits (0,1,2) are discarded status bits
  v >>= 3;

  // The remaining bits are the number of 0.25 degree (C) counts
  return v*0.25;
}

//(v*0.25*1.8) + 32